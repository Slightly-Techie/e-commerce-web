/* eslint-disable */
import * as Apollo from "@apollo/client"
import { gql } from "@apollo/client"
import * as ApolloReactComponents from "@apollo/client/react/components"
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never }
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends " $fragmentName" | "__typename" ? T[P] : never
    }
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>
const defaultOptions = {} as const
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string }
  String: { input: string; output: string }
  Boolean: { input: boolean; output: boolean }
  Int: { input: number; output: number }
  Float: { input: number; output: number }
  ISO8601DateTime: { input: any; output: any }
}

export enum Account {
  /** Non ST Member */
  NonTechie = "NON_TECHIE",
  /** Slightly Techie Member */
  Techie = "TECHIE",
}

/** Autogenerated input type of AddToCart */
export type AddToCartInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
  productId: Scalars["ID"]["input"]
}

/** Autogenerated return type of AddToCart. */
export type AddToCartPayload = {
  __typename?: "AddToCartPayload"
  cart?: Maybe<Cart>
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  status: Scalars["Int"]["output"]
  success: Scalars["Boolean"]["output"]
}

export type Cart = {
  __typename?: "Cart"
  createdAt: Scalars["ISO8601DateTime"]["output"]
  id: Scalars["ID"]["output"]
  updatedAt: Scalars["ISO8601DateTime"]["output"]
  userId: Scalars["ID"]["output"]
}

/** Autogenerated input type of ChangePassword */
export type ChangePasswordInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
  newPassword: Scalars["String"]["input"]
  oldPassword: Scalars["String"]["input"]
}

/** Autogenerated return type of ChangePassword. */
export type ChangePasswordPayload = {
  __typename?: "ChangePasswordPayload"
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  status: Scalars["Int"]["output"]
  success?: Maybe<Scalars["Boolean"]["output"]>
}

/** Autogenerated input type of ConfirmEmail */
export type ConfirmEmailInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
  token: Scalars["String"]["input"]
}

/** Autogenerated return type of ConfirmEmail. */
export type ConfirmEmailPayload = {
  __typename?: "ConfirmEmailPayload"
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  status: Scalars["Int"]["output"]
  success?: Maybe<Scalars["Boolean"]["output"]>
  token?: Maybe<Scalars["String"]["output"]>
}

/** Autogenerated input type of CreateProductView */
export type CreateProductViewInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
  productId: Scalars["ID"]["input"]
}

/** Autogenerated return type of CreateProductView. */
export type CreateProductViewPayload = {
  __typename?: "CreateProductViewPayload"
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  status: Scalars["Int"]["output"]
  success: Scalars["Boolean"]["output"]
}

/** Autogenerated input type of CreateReview */
export type CreateReviewInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
  comment?: InputMaybe<Scalars["String"]["input"]>
  productId: Scalars["ID"]["input"]
  rating: Scalars["Float"]["input"]
}

/** Autogenerated return type of CreateReview. */
export type CreateReviewPayload = {
  __typename?: "CreateReviewPayload"
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  status: Scalars["Int"]["output"]
  success: Scalars["Boolean"]["output"]
}

/** Autogenerated input type of CreateUser */
export type CreateUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
  email: Scalars["String"]["input"]
  password: Scalars["String"]["input"]
  username: Scalars["String"]["input"]
}

/** Autogenerated return type of CreateUser. */
export type CreateUserPayload = {
  __typename?: "CreateUserPayload"
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  status: Scalars["Int"]["output"]
  token?: Maybe<Scalars["String"]["output"]>
  user?: Maybe<User>
}

/** Autogenerated input type of DeleteUser */
export type DeleteUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
  password: Scalars["String"]["input"]
}

/** Autogenerated return type of DeleteUser. */
export type DeleteUserPayload = {
  __typename?: "DeleteUserPayload"
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  status: Scalars["Int"]["output"]
  success: Scalars["Boolean"]["output"]
}

export type Error = {
  __typename?: "Error"
  message?: Maybe<Scalars["String"]["output"]>
  property: Scalars["String"]["output"]
}

/** Autogenerated input type of ForgotPassword */
export type ForgotPasswordInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
  email: Scalars["String"]["input"]
}

/** Autogenerated return type of ForgotPassword. */
export type ForgotPasswordPayload = {
  __typename?: "ForgotPasswordPayload"
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  status: Scalars["Int"]["output"]
  success: Scalars["Boolean"]["output"]
}

/** Autogenerated input type of Login */
export type LoginInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
  email?: InputMaybe<Scalars["String"]["input"]>
  password: Scalars["String"]["input"]
  username?: InputMaybe<Scalars["String"]["input"]>
}

/** Autogenerated return type of Login. */
export type LoginPayload = {
  __typename?: "LoginPayload"
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  status: Scalars["Int"]["output"]
  token?: Maybe<Scalars["String"]["output"]>
  user?: Maybe<User>
}

export type Mutation = {
  __typename?: "Mutation"
  addToCart?: Maybe<AddToCartPayload>
  changePassword?: Maybe<ChangePasswordPayload>
  confirmEmail?: Maybe<ConfirmEmailPayload>
  createProductView?: Maybe<CreateProductViewPayload>
  createReview?: Maybe<CreateReviewPayload>
  createUser?: Maybe<CreateUserPayload>
  deleteUser?: Maybe<DeleteUserPayload>
  forgotPassword?: Maybe<ForgotPasswordPayload>
  login?: Maybe<LoginPayload>
  resendConfirmationEmail?: Maybe<ResendConfirmationEmailPayload>
  resetPassword?: Maybe<ResetPasswordPayload>
  saveProduct?: Maybe<SaveProductPayload>
  setAccountType?: Maybe<SetAccountPayload>
  updateReview?: Maybe<UpdateReviewPayload>
  updateUser?: Maybe<UpdateUserPayload>
  verifyResetToken?: Maybe<VerifyResetTokenPayload>
  viewProduct?: Maybe<CreateProductViewPayload>
}

export type MutationAddToCartArgs = {
  input: AddToCartInput
}

export type MutationChangePasswordArgs = {
  input: ChangePasswordInput
}

export type MutationConfirmEmailArgs = {
  input: ConfirmEmailInput
}

export type MutationCreateProductViewArgs = {
  input: CreateProductViewInput
}

export type MutationCreateReviewArgs = {
  input: CreateReviewInput
}

export type MutationCreateUserArgs = {
  input: CreateUserInput
}

export type MutationDeleteUserArgs = {
  input: DeleteUserInput
}

export type MutationForgotPasswordArgs = {
  input: ForgotPasswordInput
}

export type MutationLoginArgs = {
  input: LoginInput
}

export type MutationResendConfirmationEmailArgs = {
  input: ResendConfirmationEmailInput
}

export type MutationResetPasswordArgs = {
  input: ResetPasswordInput
}

export type MutationSaveProductArgs = {
  input: SaveProductInput
}

export type MutationSetAccountTypeArgs = {
  input: SetAccountInput
}

export type MutationUpdateReviewArgs = {
  input: UpdateReviewInput
}

export type MutationUpdateUserArgs = {
  input: UpdateUserInput
}

export type MutationVerifyResetTokenArgs = {
  input: VerifyResetTokenInput
}

export type MutationViewProductArgs = {
  input: CreateProductViewInput
}

/** Information about pagination in a connection. */
export type PageInfo = {
  __typename?: "PageInfo"
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars["String"]["output"]>
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars["Boolean"]["output"]
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars["Boolean"]["output"]
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars["String"]["output"]>
}

export type Product = {
  __typename?: "Product"
  categories?: Maybe<Scalars["String"]["output"]>
  createdAt: Scalars["ISO8601DateTime"]["output"]
  description?: Maybe<Scalars["String"]["output"]>
  discountPercentage?: Maybe<Scalars["Float"]["output"]>
  id: Scalars["ID"]["output"]
  inStock?: Maybe<Scalars["Boolean"]["output"]>
  isDiscounted?: Maybe<Scalars["Boolean"]["output"]>
  name?: Maybe<Scalars["String"]["output"]>
  price?: Maybe<Scalars["Float"]["output"]>
  published?: Maybe<Scalars["Boolean"]["output"]>
  ratings?: Maybe<Scalars["Float"]["output"]>
  reviews?: Maybe<Array<Review>>
  specification?: Maybe<Scalars["String"]["output"]>
  updatedAt: Scalars["ISO8601DateTime"]["output"]
  viewsCount?: Maybe<Scalars["Int"]["output"]>
}

/** The connection type for Product. */
export type ProductConnection = {
  __typename?: "ProductConnection"
  /** A list of edges. */
  edges?: Maybe<Array<Maybe<ProductEdge>>>
  /** A list of nodes. */
  nodes?: Maybe<Array<Maybe<Product>>>
  /** Information to aid in pagination. */
  pageInfo: PageInfo
}

/** An edge in a connection. */
export type ProductEdge = {
  __typename?: "ProductEdge"
  /** A cursor for use in pagination. */
  cursor: Scalars["String"]["output"]
  /** The item at the end of the edge. */
  node?: Maybe<Product>
}

export type Query = {
  __typename?: "Query"
  fetchProduct: Product
  fetchProductCategories: Array<Product>
  fetchSavedProducts: ProductConnection
  fetchSimilarProducts: ProductConnection
  products: ProductConnection
  profile?: Maybe<User>
}

export type QueryFetchProductArgs = {
  id: Scalars["ID"]["input"]
}

export type QueryFetchSavedProductsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
}

export type QueryFetchSimilarProductsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  first?: InputMaybe<Scalars["Int"]["input"]>
  id: Scalars["ID"]["input"]
  last?: InputMaybe<Scalars["Int"]["input"]>
}

export type QueryProductsArgs = {
  after?: InputMaybe<Scalars["String"]["input"]>
  before?: InputMaybe<Scalars["String"]["input"]>
  categories?: InputMaybe<Array<Scalars["String"]["input"]>>
  first?: InputMaybe<Scalars["Int"]["input"]>
  last?: InputMaybe<Scalars["Int"]["input"]>
}

/** Autogenerated input type of ResendConfirmationEmail */
export type ResendConfirmationEmailInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
  email: Scalars["String"]["input"]
}

/** Autogenerated return type of ResendConfirmationEmail. */
export type ResendConfirmationEmailPayload = {
  __typename?: "ResendConfirmationEmailPayload"
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  status: Scalars["Int"]["output"]
  success: Scalars["Boolean"]["output"]
}

/** Autogenerated input type of ResetPassword */
export type ResetPasswordInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
  newPassword: Scalars["String"]["input"]
  passwordConfirmation: Scalars["String"]["input"]
  resetToken: Scalars["String"]["input"]
}

/** Autogenerated return type of ResetPassword. */
export type ResetPasswordPayload = {
  __typename?: "ResetPasswordPayload"
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  status: Scalars["Int"]["output"]
  success?: Maybe<Scalars["Boolean"]["output"]>
}

export type Review = {
  __typename?: "Review"
  comment?: Maybe<Scalars["String"]["output"]>
  createdAt: Scalars["ISO8601DateTime"]["output"]
  id: Scalars["ID"]["output"]
  rating?: Maybe<Scalars["Float"]["output"]>
  updatedAt: Scalars["ISO8601DateTime"]["output"]
  user: User
}

/** Autogenerated input type of SaveProduct */
export type SaveProductInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
  productId: Scalars["ID"]["input"]
}

/** Autogenerated return type of SaveProduct. */
export type SaveProductPayload = {
  __typename?: "SaveProductPayload"
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  product: Product
  status: Scalars["Int"]["output"]
  success: Scalars["Boolean"]["output"]
}

/** Autogenerated input type of SetAccount */
export type SetAccountInput = {
  accountType: Account
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
}

/** Autogenerated return type of SetAccount. */
export type SetAccountPayload = {
  __typename?: "SetAccountPayload"
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  status: Scalars["Int"]["output"]
  user?: Maybe<User>
}

export type SocialLinks = {
  __typename?: "SocialLinks"
  github?: Maybe<Scalars["String"]["output"]>
  instagram?: Maybe<Scalars["String"]["output"]>
  linkedin?: Maybe<Scalars["String"]["output"]>
  twitter?: Maybe<Scalars["String"]["output"]>
  website?: Maybe<Scalars["String"]["output"]>
  youtube?: Maybe<Scalars["String"]["output"]>
}

export type SocialLinksInput = {
  github?: InputMaybe<Scalars["String"]["input"]>
  instagram?: InputMaybe<Scalars["String"]["input"]>
  linkedin?: InputMaybe<Scalars["String"]["input"]>
  twitter?: InputMaybe<Scalars["String"]["input"]>
  website?: InputMaybe<Scalars["String"]["input"]>
  youtube?: InputMaybe<Scalars["String"]["input"]>
}

/** Autogenerated input type of UpdateReview */
export type UpdateReviewInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
  comment?: InputMaybe<Scalars["String"]["input"]>
  productId: Scalars["ID"]["input"]
  rating: Scalars["Float"]["input"]
}

/** Autogenerated return type of UpdateReview. */
export type UpdateReviewPayload = {
  __typename?: "UpdateReviewPayload"
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  comment?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  status: Scalars["Int"]["output"]
  success: Scalars["Boolean"]["output"]
}

/** Autogenerated input type of UpdateUser */
export type UpdateUserInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
  userInput: UserInput
}

/** Autogenerated return type of UpdateUser. */
export type UpdateUserPayload = {
  __typename?: "UpdateUserPayload"
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  status: Scalars["Int"]["output"]
  user?: Maybe<User>
}

export type User = {
  __typename?: "User"
  accountType?: Maybe<Account>
  createdAt: Scalars["ISO8601DateTime"]["output"]
  email: Scalars["String"]["output"]
  emailConfirmed?: Maybe<Scalars["Boolean"]["output"]>
  firstName?: Maybe<Scalars["String"]["output"]>
  id: Scalars["ID"]["output"]
  lastName?: Maybe<Scalars["String"]["output"]>
  phoneNumber?: Maybe<Scalars["String"]["output"]>
  socialLinks?: Maybe<SocialLinks>
  updatedAt: Scalars["ISO8601DateTime"]["output"]
  username: Scalars["String"]["output"]
}

export type UserInput = {
  firstName?: InputMaybe<Scalars["String"]["input"]>
  lastName?: InputMaybe<Scalars["String"]["input"]>
  phoneNumber?: InputMaybe<Scalars["String"]["input"]>
  socialLinks?: InputMaybe<SocialLinksInput>
}

/** Autogenerated input type of VerifyResetToken */
export type VerifyResetTokenInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars["String"]["input"]>
  resetToken: Scalars["String"]["input"]
}

/** Autogenerated return type of VerifyResetToken. */
export type VerifyResetTokenPayload = {
  __typename?: "VerifyResetTokenPayload"
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars["String"]["output"]>
  errors?: Maybe<Array<Error>>
  status: Scalars["Int"]["output"]
  success?: Maybe<Scalars["Boolean"]["output"]>
}

export type ErrorFieldsFragment = {
  __typename?: "Error"
  message?: string | null
  property: string
}

export type SocialLinksFieldsFragment = {
  __typename?: "SocialLinks"
  github?: string | null
  instagram?: string | null
  linkedin?: string | null
  twitter?: string | null
  website?: string | null
  youtube?: string | null
}

export type UserFieldsFragment = {
  __typename?: "User"
  accountType?: Account | null
  createdAt: any
  email: string
  emailConfirmed?: boolean | null
  firstName?: string | null
  id: string
  lastName?: string | null
  phoneNumber?: string | null
  updatedAt: any
  username: string
  socialLinks?: {
    __typename?: "SocialLinks"
    github?: string | null
    instagram?: string | null
    linkedin?: string | null
    twitter?: string | null
    website?: string | null
    youtube?: string | null
  } | null
}

export type ConfirmEmailMutationVariables = Exact<{
  input: ConfirmEmailInput
}>

export type ConfirmEmailMutation = {
  __typename?: "Mutation"
  confirmEmail?: {
    __typename?: "ConfirmEmailPayload"
    clientMutationId?: string | null
    status: number
    success?: boolean | null
    token?: string | null
    errors?: Array<{
      __typename?: "Error"
      message?: string | null
      property: string
    }> | null
  } | null
}

export type CreateUserMutationVariables = Exact<{
  input: CreateUserInput
}>

export type CreateUserMutation = {
  __typename?: "Mutation"
  createUser?: {
    __typename?: "CreateUserPayload"
    status: number
    token?: string | null
    errors?: Array<{
      __typename?: "Error"
      message?: string | null
      property: string
    }> | null
    user?: {
      __typename?: "User"
      accountType?: Account | null
      createdAt: any
      email: string
      emailConfirmed?: boolean | null
      firstName?: string | null
      id: string
      lastName?: string | null
      phoneNumber?: string | null
      updatedAt: any
      username: string
      socialLinks?: {
        __typename?: "SocialLinks"
        github?: string | null
        instagram?: string | null
        linkedin?: string | null
        twitter?: string | null
        website?: string | null
        youtube?: string | null
      } | null
    } | null
  } | null
}

export type ForgotPasswordMutationVariables = Exact<{
  input: ForgotPasswordInput
}>

export type ForgotPasswordMutation = {
  __typename?: "Mutation"
  forgotPassword?: {
    __typename?: "ForgotPasswordPayload"
    status: number
    success: boolean
    errors?: Array<{
      __typename?: "Error"
      message?: string | null
      property: string
    }> | null
  } | null
}

export type LoginMutationVariables = Exact<{
  input: LoginInput
}>

export type LoginMutation = {
  __typename?: "Mutation"
  login?: {
    __typename?: "LoginPayload"
    status: number
    token?: string | null
    errors?: Array<{
      __typename?: "Error"
      message?: string | null
      property: string
    }> | null
    user?: {
      __typename?: "User"
      accountType?: Account | null
      createdAt: any
      email: string
      emailConfirmed?: boolean | null
      firstName?: string | null
      id: string
      lastName?: string | null
      phoneNumber?: string | null
      updatedAt: any
      username: string
      socialLinks?: {
        __typename?: "SocialLinks"
        github?: string | null
        instagram?: string | null
        linkedin?: string | null
        twitter?: string | null
        website?: string | null
        youtube?: string | null
      } | null
    } | null
  } | null
}

export type ResendConfirmationEmailMutationVariables = Exact<{
  input: ResendConfirmationEmailInput
}>

export type ResendConfirmationEmailMutation = {
  __typename?: "Mutation"
  resendConfirmationEmail?: {
    __typename?: "ResendConfirmationEmailPayload"
    status: number
    success: boolean
    errors?: Array<{
      __typename?: "Error"
      message?: string | null
      property: string
    }> | null
  } | null
}

export type ResetPasswordMutationVariables = Exact<{
  input: ResetPasswordInput
}>

export type ResetPasswordMutation = {
  __typename?: "Mutation"
  resetPassword?: {
    __typename?: "ResetPasswordPayload"
    clientMutationId?: string | null
    status: number
    success?: boolean | null
    errors?: Array<{
      __typename?: "Error"
      message?: string | null
      property: string
    }> | null
  } | null
}

export type SetAccountTypeMutationVariables = Exact<{
  input: SetAccountInput
}>

export type SetAccountTypeMutation = {
  __typename?: "Mutation"
  setAccountType?: {
    __typename?: "SetAccountPayload"
    status: number
    errors?: Array<{
      __typename?: "Error"
      message?: string | null
      property: string
    }> | null
    user?: {
      __typename?: "User"
      accountType?: Account | null
      createdAt: any
      email: string
      emailConfirmed?: boolean | null
      firstName?: string | null
      id: string
      lastName?: string | null
      phoneNumber?: string | null
      updatedAt: any
      username: string
      socialLinks?: {
        __typename?: "SocialLinks"
        github?: string | null
        instagram?: string | null
        linkedin?: string | null
        twitter?: string | null
        website?: string | null
        youtube?: string | null
      } | null
    } | null
  } | null
}

export type UpdataUserMutationVariables = Exact<{
  input: UpdateUserInput
}>

export type UpdataUserMutation = {
  __typename?: "Mutation"
  updateUser?: {
    __typename?: "UpdateUserPayload"
    clientMutationId?: string | null
    status: number
    errors?: Array<{
      __typename?: "Error"
      message?: string | null
      property: string
    }> | null
    user?: {
      __typename?: "User"
      accountType?: Account | null
      createdAt: any
      email: string
      emailConfirmed?: boolean | null
      firstName?: string | null
      id: string
      lastName?: string | null
      phoneNumber?: string | null
      updatedAt: any
      username: string
      socialLinks?: {
        __typename?: "SocialLinks"
        github?: string | null
        instagram?: string | null
        linkedin?: string | null
        twitter?: string | null
        website?: string | null
        youtube?: string | null
      } | null
    } | null
  } | null
}

export type VerifyResetTokenMutationVariables = Exact<{
  input: VerifyResetTokenInput
}>

export type VerifyResetTokenMutation = {
  __typename?: "Mutation"
  verifyResetToken?: {
    __typename?: "VerifyResetTokenPayload"
    status: number
    success?: boolean | null
    errors?: Array<{
      __typename?: "Error"
      message?: string | null
      property: string
    }> | null
  } | null
}

export const ErrorFieldsFragmentDoc = gql`
  fragment ErrorFields on Error {
    message
    property
  }
`
export const SocialLinksFieldsFragmentDoc = gql`
  fragment SocialLinksFields on SocialLinks {
    github
    instagram
    linkedin
    twitter
    website
    youtube
  }
`
export const UserFieldsFragmentDoc = gql`
  fragment UserFields on User {
    accountType
    createdAt
    email
    emailConfirmed
    firstName
    id
    lastName
    phoneNumber
    socialLinks {
      ...SocialLinksFields
    }
    updatedAt
    username
  }
  ${SocialLinksFieldsFragmentDoc}
`
export const ConfirmEmailDocument = gql`
  mutation ConfirmEmail($input: ConfirmEmailInput!) {
    confirmEmail(input: $input) {
      clientMutationId
      errors {
        ...ErrorFields
      }
      status
      success
      token
    }
  }
  ${ErrorFieldsFragmentDoc}
`
export type ConfirmEmailMutationFn = Apollo.MutationFunction<
  ConfirmEmailMutation,
  ConfirmEmailMutationVariables
>
export type ConfirmEmailComponentProps = Omit<
  ApolloReactComponents.MutationComponentOptions<
    ConfirmEmailMutation,
    ConfirmEmailMutationVariables
  >,
  "mutation"
>

export const ConfirmEmailComponent = (props: ConfirmEmailComponentProps) => (
  <ApolloReactComponents.Mutation<
    ConfirmEmailMutation,
    ConfirmEmailMutationVariables
  >
    mutation={ConfirmEmailDocument}
    {...props}
  />
)

/**
 * __useConfirmEmailMutation__
 *
 * To run a mutation, you first call `useConfirmEmailMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useConfirmEmailMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [confirmEmailMutation, { data, loading, error }] = useConfirmEmailMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useConfirmEmailMutation(
  baseOptions?: Apollo.MutationHookOptions<
    ConfirmEmailMutation,
    ConfirmEmailMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    ConfirmEmailMutation,
    ConfirmEmailMutationVariables
  >(ConfirmEmailDocument, options)
}
export type ConfirmEmailMutationHookResult = ReturnType<
  typeof useConfirmEmailMutation
>
export type ConfirmEmailMutationResult =
  Apollo.MutationResult<ConfirmEmailMutation>
export type ConfirmEmailMutationOptions = Apollo.BaseMutationOptions<
  ConfirmEmailMutation,
  ConfirmEmailMutationVariables
>
export const CreateUserDocument = gql`
  mutation CreateUser($input: CreateUserInput!) {
    createUser(input: $input) {
      errors {
        ...ErrorFields
      }
      status
      token
      user {
        ...UserFields
      }
    }
  }
  ${ErrorFieldsFragmentDoc}
  ${UserFieldsFragmentDoc}
`
export type CreateUserMutationFn = Apollo.MutationFunction<
  CreateUserMutation,
  CreateUserMutationVariables
>
export type CreateUserComponentProps = Omit<
  ApolloReactComponents.MutationComponentOptions<
    CreateUserMutation,
    CreateUserMutationVariables
  >,
  "mutation"
>

export const CreateUserComponent = (props: CreateUserComponentProps) => (
  <ApolloReactComponents.Mutation<
    CreateUserMutation,
    CreateUserMutationVariables
  >
    mutation={CreateUserDocument}
    {...props}
  />
)

/**
 * __useCreateUserMutation__
 *
 * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateUserMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateUserMutation,
    CreateUserMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(
    CreateUserDocument,
    options,
  )
}
export type CreateUserMutationHookResult = ReturnType<
  typeof useCreateUserMutation
>
export type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>
export type CreateUserMutationOptions = Apollo.BaseMutationOptions<
  CreateUserMutation,
  CreateUserMutationVariables
>
export const ForgotPasswordDocument = gql`
  mutation ForgotPassword($input: ForgotPasswordInput!) {
    forgotPassword(input: $input) {
      errors {
        ...ErrorFields
      }
      status
      success
    }
  }
  ${ErrorFieldsFragmentDoc}
`
export type ForgotPasswordMutationFn = Apollo.MutationFunction<
  ForgotPasswordMutation,
  ForgotPasswordMutationVariables
>
export type ForgotPasswordComponentProps = Omit<
  ApolloReactComponents.MutationComponentOptions<
    ForgotPasswordMutation,
    ForgotPasswordMutationVariables
  >,
  "mutation"
>

export const ForgotPasswordComponent = (
  props: ForgotPasswordComponentProps,
) => (
  <ApolloReactComponents.Mutation<
    ForgotPasswordMutation,
    ForgotPasswordMutationVariables
  >
    mutation={ForgotPasswordDocument}
    {...props}
  />
)

/**
 * __useForgotPasswordMutation__
 *
 * To run a mutation, you first call `useForgotPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useForgotPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [forgotPasswordMutation, { data, loading, error }] = useForgotPasswordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useForgotPasswordMutation(
  baseOptions?: Apollo.MutationHookOptions<
    ForgotPasswordMutation,
    ForgotPasswordMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    ForgotPasswordMutation,
    ForgotPasswordMutationVariables
  >(ForgotPasswordDocument, options)
}
export type ForgotPasswordMutationHookResult = ReturnType<
  typeof useForgotPasswordMutation
>
export type ForgotPasswordMutationResult =
  Apollo.MutationResult<ForgotPasswordMutation>
export type ForgotPasswordMutationOptions = Apollo.BaseMutationOptions<
  ForgotPasswordMutation,
  ForgotPasswordMutationVariables
>
export const LoginDocument = gql`
  mutation Login($input: LoginInput!) {
    login(input: $input) {
      errors {
        ...ErrorFields
      }
      status
      token
      user {
        ...UserFields
      }
    }
  }
  ${ErrorFieldsFragmentDoc}
  ${UserFieldsFragmentDoc}
`
export type LoginMutationFn = Apollo.MutationFunction<
  LoginMutation,
  LoginMutationVariables
>
export type LoginComponentProps = Omit<
  ApolloReactComponents.MutationComponentOptions<
    LoginMutation,
    LoginMutationVariables
  >,
  "mutation"
>

export const LoginComponent = (props: LoginComponentProps) => (
  <ApolloReactComponents.Mutation<LoginMutation, LoginMutationVariables>
    mutation={LoginDocument}
    {...props}
  />
)

/**
 * __useLoginMutation__
 *
 * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useLoginMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [loginMutation, { data, loading, error }] = useLoginMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useLoginMutation(
  baseOptions?: Apollo.MutationHookOptions<
    LoginMutation,
    LoginMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<LoginMutation, LoginMutationVariables>(
    LoginDocument,
    options,
  )
}
export type LoginMutationHookResult = ReturnType<typeof useLoginMutation>
export type LoginMutationResult = Apollo.MutationResult<LoginMutation>
export type LoginMutationOptions = Apollo.BaseMutationOptions<
  LoginMutation,
  LoginMutationVariables
>
export const ResendConfirmationEmailDocument = gql`
  mutation ResendConfirmationEmail($input: ResendConfirmationEmailInput!) {
    resendConfirmationEmail(input: $input) {
      errors {
        ...ErrorFields
      }
      status
      success
    }
  }
  ${ErrorFieldsFragmentDoc}
`
export type ResendConfirmationEmailMutationFn = Apollo.MutationFunction<
  ResendConfirmationEmailMutation,
  ResendConfirmationEmailMutationVariables
>
export type ResendConfirmationEmailComponentProps = Omit<
  ApolloReactComponents.MutationComponentOptions<
    ResendConfirmationEmailMutation,
    ResendConfirmationEmailMutationVariables
  >,
  "mutation"
>

export const ResendConfirmationEmailComponent = (
  props: ResendConfirmationEmailComponentProps,
) => (
  <ApolloReactComponents.Mutation<
    ResendConfirmationEmailMutation,
    ResendConfirmationEmailMutationVariables
  >
    mutation={ResendConfirmationEmailDocument}
    {...props}
  />
)

/**
 * __useResendConfirmationEmailMutation__
 *
 * To run a mutation, you first call `useResendConfirmationEmailMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResendConfirmationEmailMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resendConfirmationEmailMutation, { data, loading, error }] = useResendConfirmationEmailMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useResendConfirmationEmailMutation(
  baseOptions?: Apollo.MutationHookOptions<
    ResendConfirmationEmailMutation,
    ResendConfirmationEmailMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    ResendConfirmationEmailMutation,
    ResendConfirmationEmailMutationVariables
  >(ResendConfirmationEmailDocument, options)
}
export type ResendConfirmationEmailMutationHookResult = ReturnType<
  typeof useResendConfirmationEmailMutation
>
export type ResendConfirmationEmailMutationResult =
  Apollo.MutationResult<ResendConfirmationEmailMutation>
export type ResendConfirmationEmailMutationOptions = Apollo.BaseMutationOptions<
  ResendConfirmationEmailMutation,
  ResendConfirmationEmailMutationVariables
>
export const ResetPasswordDocument = gql`
  mutation ResetPassword($input: ResetPasswordInput!) {
    resetPassword(input: $input) {
      clientMutationId
      errors {
        ...ErrorFields
      }
      status
      success
    }
  }
  ${ErrorFieldsFragmentDoc}
`
export type ResetPasswordMutationFn = Apollo.MutationFunction<
  ResetPasswordMutation,
  ResetPasswordMutationVariables
>
export type ResetPasswordComponentProps = Omit<
  ApolloReactComponents.MutationComponentOptions<
    ResetPasswordMutation,
    ResetPasswordMutationVariables
  >,
  "mutation"
>

export const ResetPasswordComponent = (props: ResetPasswordComponentProps) => (
  <ApolloReactComponents.Mutation<
    ResetPasswordMutation,
    ResetPasswordMutationVariables
  >
    mutation={ResetPasswordDocument}
    {...props}
  />
)

/**
 * __useResetPasswordMutation__
 *
 * To run a mutation, you first call `useResetPasswordMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useResetPasswordMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [resetPasswordMutation, { data, loading, error }] = useResetPasswordMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useResetPasswordMutation(
  baseOptions?: Apollo.MutationHookOptions<
    ResetPasswordMutation,
    ResetPasswordMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    ResetPasswordMutation,
    ResetPasswordMutationVariables
  >(ResetPasswordDocument, options)
}
export type ResetPasswordMutationHookResult = ReturnType<
  typeof useResetPasswordMutation
>
export type ResetPasswordMutationResult =
  Apollo.MutationResult<ResetPasswordMutation>
export type ResetPasswordMutationOptions = Apollo.BaseMutationOptions<
  ResetPasswordMutation,
  ResetPasswordMutationVariables
>
export const SetAccountTypeDocument = gql`
  mutation setAccountType($input: SetAccountInput!) {
    setAccountType(input: $input) {
      errors {
        ...ErrorFields
      }
      status
      user {
        ...UserFields
      }
    }
  }
  ${ErrorFieldsFragmentDoc}
  ${UserFieldsFragmentDoc}
`
export type SetAccountTypeMutationFn = Apollo.MutationFunction<
  SetAccountTypeMutation,
  SetAccountTypeMutationVariables
>
export type SetAccountTypeComponentProps = Omit<
  ApolloReactComponents.MutationComponentOptions<
    SetAccountTypeMutation,
    SetAccountTypeMutationVariables
  >,
  "mutation"
>

export const SetAccountTypeComponent = (
  props: SetAccountTypeComponentProps,
) => (
  <ApolloReactComponents.Mutation<
    SetAccountTypeMutation,
    SetAccountTypeMutationVariables
  >
    mutation={SetAccountTypeDocument}
    {...props}
  />
)

/**
 * __useSetAccountTypeMutation__
 *
 * To run a mutation, you first call `useSetAccountTypeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSetAccountTypeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [setAccountTypeMutation, { data, loading, error }] = useSetAccountTypeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useSetAccountTypeMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SetAccountTypeMutation,
    SetAccountTypeMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    SetAccountTypeMutation,
    SetAccountTypeMutationVariables
  >(SetAccountTypeDocument, options)
}
export type SetAccountTypeMutationHookResult = ReturnType<
  typeof useSetAccountTypeMutation
>
export type SetAccountTypeMutationResult =
  Apollo.MutationResult<SetAccountTypeMutation>
export type SetAccountTypeMutationOptions = Apollo.BaseMutationOptions<
  SetAccountTypeMutation,
  SetAccountTypeMutationVariables
>
export const UpdataUserDocument = gql`
  mutation UpdataUser($input: UpdateUserInput!) {
    updateUser(input: $input) {
      clientMutationId
      errors {
        ...ErrorFields
      }
      status
      user {
        ...UserFields
      }
    }
  }
  ${ErrorFieldsFragmentDoc}
  ${UserFieldsFragmentDoc}
`
export type UpdataUserMutationFn = Apollo.MutationFunction<
  UpdataUserMutation,
  UpdataUserMutationVariables
>
export type UpdataUserComponentProps = Omit<
  ApolloReactComponents.MutationComponentOptions<
    UpdataUserMutation,
    UpdataUserMutationVariables
  >,
  "mutation"
>

export const UpdataUserComponent = (props: UpdataUserComponentProps) => (
  <ApolloReactComponents.Mutation<
    UpdataUserMutation,
    UpdataUserMutationVariables
  >
    mutation={UpdataUserDocument}
    {...props}
  />
)

/**
 * __useUpdataUserMutation__
 *
 * To run a mutation, you first call `useUpdataUserMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdataUserMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updataUserMutation, { data, loading, error }] = useUpdataUserMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdataUserMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdataUserMutation,
    UpdataUserMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<UpdataUserMutation, UpdataUserMutationVariables>(
    UpdataUserDocument,
    options,
  )
}
export type UpdataUserMutationHookResult = ReturnType<
  typeof useUpdataUserMutation
>
export type UpdataUserMutationResult = Apollo.MutationResult<UpdataUserMutation>
export type UpdataUserMutationOptions = Apollo.BaseMutationOptions<
  UpdataUserMutation,
  UpdataUserMutationVariables
>
export const VerifyResetTokenDocument = gql`
  mutation VerifyResetToken($input: VerifyResetTokenInput!) {
    verifyResetToken(input: $input) {
      errors {
        ...ErrorFields
      }
      status
      success
    }
  }
  ${ErrorFieldsFragmentDoc}
`
export type VerifyResetTokenMutationFn = Apollo.MutationFunction<
  VerifyResetTokenMutation,
  VerifyResetTokenMutationVariables
>
export type VerifyResetTokenComponentProps = Omit<
  ApolloReactComponents.MutationComponentOptions<
    VerifyResetTokenMutation,
    VerifyResetTokenMutationVariables
  >,
  "mutation"
>

export const VerifyResetTokenComponent = (
  props: VerifyResetTokenComponentProps,
) => (
  <ApolloReactComponents.Mutation<
    VerifyResetTokenMutation,
    VerifyResetTokenMutationVariables
  >
    mutation={VerifyResetTokenDocument}
    {...props}
  />
)

/**
 * __useVerifyResetTokenMutation__
 *
 * To run a mutation, you first call `useVerifyResetTokenMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useVerifyResetTokenMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [verifyResetTokenMutation, { data, loading, error }] = useVerifyResetTokenMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useVerifyResetTokenMutation(
  baseOptions?: Apollo.MutationHookOptions<
    VerifyResetTokenMutation,
    VerifyResetTokenMutationVariables
  >,
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    VerifyResetTokenMutation,
    VerifyResetTokenMutationVariables
  >(VerifyResetTokenDocument, options)
}
export type VerifyResetTokenMutationHookResult = ReturnType<
  typeof useVerifyResetTokenMutation
>
export type VerifyResetTokenMutationResult =
  Apollo.MutationResult<VerifyResetTokenMutation>
export type VerifyResetTokenMutationOptions = Apollo.BaseMutationOptions<
  VerifyResetTokenMutation,
  VerifyResetTokenMutationVariables
>
